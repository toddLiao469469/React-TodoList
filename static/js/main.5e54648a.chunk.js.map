{"version":3,"sources":["components/ToDoInput.tsx","store/constants/index.tsx","components/ToDoList.tsx","App.tsx","store/reducer.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoInputContainer","styled","div","ToDoListInput","OutlinedInput","NewToDoBtn","Button","ToDoInput","dispatch","useDispatch","useState","name","key","state","setState","data-testid","type","value","onChange","e","target","variant","color","onClick","payload","ToDoList","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","ToDoListContainer","ToDoCard","Card","ToDoText","props","isfinished","ToDoTextTitle","ToDoDeleteBtn","DisplayToDoList","useSelector","map","ele","i","finished","toFinishKey","startIcon","toDeleteKey","ToDoTitle","InputContainer","App","ToDoListCount","count","allToDoList","remainToDo","setRemainToDo","finishedCount","setfinishedCount","isFinishToDoCount","useEffect","filter","length","console","log","className","initState","rootReducer","action","Object","assign","concat","cloneToDo","slice","splice","store","createStore","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5e54648a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ADD_TODO } from \"../store/constants/index\";\nimport styled from \"@emotion/styled\";\nimport {OutlinedInput , Button} from '@material-ui/core';\n\n\nconst ToDoInputContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100px;\n  margin-bottom: 50px;\n`;\nconst ToDoListInput = styled(OutlinedInput)`\n  width: 30%;\n  min-width: 200px;\n  height: 40px;\n  margin-bottom: 20px;\n  box-sizing: border-box;\n`;\nconst NewToDoBtn = styled(Button)`\n  width: 30%;\n  min-width: 200px;\n  height: 40px;\n`;\n\nexport default function ToDoInput() {\n  const dispatch = useDispatch();\n  const [state, setState] = useState({ name: \"\", key: 1 });\n  const addToDo = () => {\n    if (state.name) {\n      dispatch({\n        type: ADD_TODO,\n        payload: {\n          ToDoList: { name: state.name, key: state.key },\n        },\n      });\n      setState({ key: state.key + 1, name: \"\" });\n    }\n  };\n\n  return (\n    <ToDoInputContainer>\n      <ToDoListInput\n      \n        data-testid=\"Input\"\n        type=\"text\"\n        value={state.name}\n        onChange={(e) => setState({ key: state.key, name: e.target.value })}\n      />\n      <NewToDoBtn variant=\"contained\" color=\"primary\"\n       onClick={addToDo}>新增ToDo</NewToDoBtn>\n    </ToDoInputContainer>\n  );\n}\n","export const ADD_TODO = \"ADD_TODO\";\nexport type ADD_TODO = typeof ADD_TODO;\n\nexport const FINISHED_TODO = \"FINISHED_TODO\";\nexport type FINISHED_TODO = typeof FINISHED_TODO;\n\nexport const EDIT_TODO = \"EDIT_TODO\";\nexport type EDIT_TODO = typeof EDIT_TODO;\n\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport type DELETE_TODO = typeof DELETE_TODO;\n\nexport const TOGGLE_ALL_TODOS = \"TOGGLE_ALL_TODOS\";\nexport type TOGGLE_ALL_TODOS = typeof TOGGLE_ALL_TODOS;\n\nexport const SET_CURRENT_FILTER = \"SET_CURRENT_FILTER\";\nexport type SET_CURRENT_FILTER = typeof SET_CURRENT_FILTER;","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { initState } from \"../store/reducer\";\nimport { DELETE_TODO, FINISHED_TODO } from \"../store/constants/index\";\nimport {Card ,Button} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\n\nconst size = {\n  mobileS: '320px',\n  mobileM: '375px',\n  mobileL: '425px',\n  tablet: '768px',\n  laptop: '1024px',\n  laptopL: '1440px',\n  desktop: '2560px'\n}\n\nconst device = {\n  mobileS: `(max-width: ${size.mobileS})`,\n  mobileM: `(max-width: ${size.mobileM})`,\n  mobileL: `(max-width: ${size.mobileL})`,\n  tablet: `(max-width: ${size.tablet})`,\n  laptop: `(max-width: ${size.laptop})`,\n  laptopL: `(max-width: ${size.laptopL})`,\n  desktop: `(max-width: ${size.desktop})`,\n  desktopL: `(max-width: ${size.desktop})`\n};\n\nconst ToDoListContainer = styled.div`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: minmax(50px, auto);\n\n  @media ${device.tablet}{\n    grid-template: 1fr /1fr 1fr ;\n  }\n  width: 100%;\n  min-height: 200px;\n  padding:50px;\n  box-sizing:border-box;\n`;\n\nconst ToDoCard = styled(Card)`\n  display: flex;\n  min-height: 200px;\n  margin: 20px 10px;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  background-color: #fff;\n  padding-bottom: 30px;\n  color:#2c2c2c;\n  \n`;\ntype ToDoTextProp={\n  isfinished:Boolean;\n}\nconst ToDoText = styled.div<ToDoTextProp>`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n  text-decoration: ${(props)=>props.isfinished ? 'line-through': 'none'};\n  word-break: break-all;\n  `;\n\n\nconst ToDoTextTitle = styled(\"div\")``\n\nconst ToDoDeleteBtn = styled(Button)`\n  width: 50%;\n  margin: 0 auto;\n  border: 1px solid #1c1c1c;\n  border-radius: 3px;\n  height: 40px;\n  background:#fff;\n`;\n\nexport default function DisplayToDoList() {\n  const ToDoList = useSelector((state: initState) => state.ToDoList);\n  const dispatch = useDispatch();\n\n  const Delete = (toDeleteKey: number) => {\n    dispatch({ type: DELETE_TODO, payload: { toDeleteKey: toDeleteKey } });\n  };\n\n  const finished = (toFinishKey: Number) => {\n    dispatch({ type: FINISHED_TODO, payload: { toFinishKey: toFinishKey } });\n  };\n  \n\n\n  return (\n    <ToDoListContainer>\n      {ToDoList.map((ele: { name: string; key: number; finished:boolean }, i) => {\n        if(i>=1)\n        return (\n          <ToDoCard key={ele.key} > \n            <ToDoTextTitle>第{i}項：</ToDoTextTitle>\n            <ToDoText  isfinished={ele.finished}\n              onClick={() => {\n                finished(i);\n              }}\n              data-testid={ele.key}\n              \n            >\n              {ele.name}\n            </ToDoText>\n            <ToDoDeleteBtn\n            variant=\"contained\"\n            color=\"secondary\"\n            startIcon={<DeleteIcon />}\n              onClick={() => {\n                Delete(i);\n              }}\n            >\n              刪除\n            </ToDoDeleteBtn>\n          </ToDoCard>\n        );\n      })}\n    </ToDoListContainer>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport ToDoInput from \"./components/ToDoInput\";\nimport ToDoList from \"./components/ToDoList\";\nimport { useSelector } from \"react-redux\";\nimport { initState } from \"./store/reducer\";\nimport styled from \"@emotion/styled\";\nimport \"./App.css\";\n\nconst ToDoTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 30px;\n`;\nconst InputContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 300px;\n`;\nfunction App() {\n  const ToDoListCount = useSelector((state: initState) => state.count);\n  const allToDoList = useSelector((state: initState) => state.ToDoList);\n  const [remainToDo, setRemainToDo] = useState(0);\n  const [finishedCount, setfinishedCount] = useState(0);\n  let isFinishToDoCount = 0;\n\n  useEffect(() => {\n    isFinishToDoCount = allToDoList.filter((ele) => {\n      return ele.finished === true;\n    }).length;\n    setfinishedCount(isFinishToDoCount);\n    console.log(isFinishToDoCount);\n    setRemainToDo(ToDoListCount - isFinishToDoCount);\n  }, [allToDoList]);\n  return (\n    <div className=\"App\">\n      <InputContainer>\n        <ToDoTitle>\n          {\"ToDoList\"}\n          {remainToDo > 0 ? `剩餘${remainToDo}項` : \"\"}\n          {`已完成${finishedCount}`}\n        </ToDoTitle>\n        <ToDoInput />\n      </InputContainer>\n\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ADD_TODO, DELETE_TODO, FINISHED_TODO } from \"../store/constants/index\";\nimport { ToDoAction } from \"../store/actions/index\";\n\nexport interface initState {\n  ToDoList: { name: string; key: number; finished: boolean }[];\n  count: number;\n}\n\nconst initState = {\n  ToDoList: [{ name: \"first\", key: 0, finished: false }],\n  count: 0,\n};\n\nconst rootReducer = (state = initState, action: ToDoAction): initState => {\n  switch (action.type) {\n    case ADD_TODO: {\n      return Object.assign({}, state, {\n        ToDoList: state.ToDoList.concat({\n          name: action.payload.ToDoList.name,\n          key: action.payload.ToDoList.key,\n          finished: false,\n        }),\n        count: state.ToDoList.length,\n      });\n    }\n    case DELETE_TODO: {\n      const cloneToDo = state.ToDoList.slice();\n      cloneToDo.splice(action.payload.toDeleteKey, 1);\n      return {\n        ...state,\n        ToDoList: cloneToDo,\n        count: cloneToDo.length - 1,\n      };\n    }\n    case FINISHED_TODO: {\n      const cloneToDo = state.ToDoList.slice();\n      cloneToDo[action.payload.toFinishKey].finished =\n      ! cloneToDo[action.payload.toFinishKey].finished;\n      return {\n        ...state,\n        ToDoList:cloneToDo,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default rootReducer;\n","import { createStore } from 'redux';\nimport rootReducer from './reducer';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\nconst store = createStore(rootReducer,composeWithDevTools());\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}