{"version":3,"sources":["components/ToDoInput.tsx","store/constants/index.tsx","hooks/useFilter.tsx","components/ToDoList.tsx","components/ToDoFilter.tsx","App.tsx","store/reducers/filterReducer.tsx","store/reducers/ToDoReducer.tsx","store/reducers/index.tsx","store/store.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoInputContainer","styled","div","ToDoListInput","OutlinedInput","NewToDoBtn","Button","ToDoInput","dispatch","useDispatch","useState","name","key","state","setState","addToDo","type","payload","ToDoList","data-testid","value","onChange","e","target","onKeyDown","variant","color","onClick","useFilterCounter","allToDoLists","filterType","filter","ele","finished","size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","ToDoListContainer","props","length","css","ToDoCard","Card","ToDoText","isfinished","ToDoTextTitle","ToDoDeleteBtn","DisplayToDoList","useSelector","filterReducer","filteredToDoList","useFilter","map","toFinishKey","startIcon","toDeleteKey","FilterSelect","Select","optionMap","text","ToDoFilter","setFilterType","handleFilterSelect","ToDoTitle","InputContainer","App","ToDoListCount","count","allToDoList","remainToDo","setRemainToDo","finishedCount","setFinishedCount","isFinishToDoCount","useRef","useEffect","current","className","FilterInitState","FilterReducer","action","Object","assign","initState","ToDoReducer","concat","cloneToDo","slice","rootReducer","combineReducers","store","createStore","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6cc1b536.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { ADD_TODO } from \"../store/constants/index\";\nimport styled from \"@emotion/styled\";\nimport {OutlinedInput , Button} from '@material-ui/core';\n\n\nconst ToDoInputContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 100px;\n  margin-bottom: 10px;\n`;\nconst ToDoListInput = styled(OutlinedInput)`\n  width: 30%;\n  min-width: 200px;\n  height: 40px;\n  margin-bottom: 20px;\n  box-sizing: border-box;\n`;\n\nconst NewToDoBtn = styled(Button)`\n  width: 30%;\n  min-width: 200px;\n  height: 40px;\n`;\n\nexport default function ToDoInput() {\n  const dispatch = useDispatch();\n  const [state, setState] = useState({ name: \"\", key: 1 });\n  const addToDo = () => {\n    if (state.name) {\n      dispatch({\n        type: ADD_TODO,\n        payload: {\n          ToDoList: { name: state.name, key: state.key },\n        },\n      });\n      setState({ key: state.key + 1, name: \"\" });\n    }\n  };\n\n  return (\n    <ToDoInputContainer>\n      <ToDoListInput\n      \n        data-testid=\"Input\"\n        type=\"text\"\n        value={state.name}\n        onChange={(e) => setState({ key: state.key, name: e.target.value })}\n        onKeyDown={(e)=>e.key==='Enter' ? addToDo() :\"\"}\n      />\n      <NewToDoBtn variant=\"contained\" color=\"primary\"\n       onClick={addToDo}>新增ToDo</NewToDoBtn>\n    </ToDoInputContainer>\n  );\n}\n","// ToDo Action type\n\nexport const ADD_TODO = \"ADD_TODO\";\nexport type ADD_TODO = typeof ADD_TODO;\n\nexport const FINISHED_TODO = \"FINISHED_TODO\";\nexport type FINISHED_TODO = typeof FINISHED_TODO;\n\nexport const EDIT_TODO = \"EDIT_TODO\";\nexport type EDIT_TODO = typeof EDIT_TODO;\n\nexport const DELETE_TODO = \"DELETE_TODO\";\nexport type DELETE_TODO = typeof DELETE_TODO;\n\n// Filter Action type\n\nexport const FILTER_FINISHED_TODO = \"FILTER_FINSHED_TODOS\";\nexport type FILTER_FINISHED_TODO = typeof FILTER_FINISHED_TODO;\n\nexport const FILTER_UNFINISHED_TODO = \"FILTER_UNFINISHED_TODO\";\nexport type FILTER_UNFINISHED_TODO = typeof FILTER_UNFINISHED_TODO;\n\nexport const FILTER_ALL_TODO = \"FILTER_ALL_TODO\";\nexport type FILTER_ALL_TODO = typeof FILTER_ALL_TODO;\n\n","import {Todo,ToDoLists} from '../type';\nimport {\n    FILTER_FINISHED_TODO,\n    FILTER_UNFINISHED_TODO,\n    FILTER_ALL_TODO,\n  } from \"../store/constants/index\";\n  \n\nconst useFilterCounter = (allToDoLists: ToDoLists,filterType:string): ToDoLists => {\n  \n  const filterTodo =  allToDoLists.filter((ele:Todo) => {\n    if(filterType===FILTER_FINISHED_TODO){\n      return ele.finished === true\n    } else if (filterType===FILTER_UNFINISHED_TODO){\n      return ele.finished===false\n    }else if(filterType===FILTER_ALL_TODO){\n      return ele\n    }\n  })\n  return filterTodo\n  };\n\n  export default useFilterCounter","import React from \"react\";\nimport styled from \"@emotion/styled\";\nimport { css } from \"@emotion/core\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { rootState } from \"../store/reducers/index\";\nimport { DELETE_TODO, FINISHED_TODO } from \"../store/constants/index\";\nimport { Card, Button } from \"@material-ui/core\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport useFilter from \"../hooks/useFilter\";\n\nconst size = {\n  mobileS: \"320px\",\n  mobileM: \"375px\",\n  mobileL: \"425px\",\n  tablet: \"768px\",\n  laptop: \"1024px\",\n  laptopL: \"1440px\",\n  desktop: \"2560px\",\n};\n\nconst device = {\n  mobileS: `(max-width: ${size.mobileS})`,\n  mobileM: `(max-width: ${size.mobileM})`,\n  mobileL: `(max-width: ${size.mobileL})`,\n  tablet: `(max-width: ${size.tablet})`,\n  laptop: `(max-width: ${size.laptop})`,\n  laptopL: `(max-width: ${size.laptopL})`,\n  desktop: `(max-width: ${size.desktop})`,\n  desktopL: `(max-width: ${size.desktop})`,\n};\n\ntype ToDoTextProp = {\n  isfinished: Boolean;\n};\ntype ToDoListContainerProp = {\n  length: Number;\n};\nconst ToDoListContainer = styled.div<ToDoListContainerProp>`\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n  grid-auto-rows: minmax(50px, auto);\n\n  @media ${device.tablet} {\n    grid-template: 1fr /1fr 1fr;\n  }\n  width: calc(100% - 100px);\n  min-height: 200px;\n  padding: 50px;\n  box-sizing: border-box;\n  margin: 0 50px;\n  max-height: calc(100vh - 300px);\n  overflow: scroll;\n\n  ${(props) =>\n    props.length >= 1 &&\n    css`\n      background-color:#f1f1f1;\n      border-radius: 5px;\n    `}\n`;\n\nconst ToDoCard = styled(Card)`\n  display: flex;\n  min-height: 200px;\n  margin: 20px 10px;\n  justify-content: space-between;\n  align-items: center;\n  flex-direction: column;\n  background-color: #fff;\n  padding-bottom: 30px;\n  color: #2c2c2c;\n`;\n\nconst ToDoText = styled.div<ToDoTextProp>`\n  display: flex;\n  height: 100%;\n  width: 100%;\n  padding: 20px;\n  box-sizing: border-box;\n  text-decoration: ${(props) => (props.isfinished ? \"line-through\" : \"none\")};\n  word-break: break-all;\n`;\n\nconst ToDoTextTitle = styled(\"div\")``;\n\nconst ToDoDeleteBtn = styled(Button)`\n  width: 50%;\n  margin: 0 auto;\n  border: 1px solid #1c1c1c;\n  border-radius: 3px;\n  height: 40px;\n  background: #fff;\n`;\n\ninterface Todo {\n  name: string;\n  key: number;\n  finished: boolean;\n}\n\nexport default function DisplayToDoList() {\n  const ToDoList = useSelector((state: rootState) => state.ToDoList.ToDoList);\n  const filterType = useSelector(\n    (state: rootState) => state.filterReducer.filterType\n  );\n  const dispatch = useDispatch();\n  const filteredToDoList = useFilter(ToDoList, filterType);\n\n  const handleToDoDelete = (toDeleteKey: number) => {\n    dispatch({ type: DELETE_TODO, payload: { toDeleteKey: toDeleteKey } });\n  };\n\n  const handleToDoFinished = (toFinishKey: Number) => {\n    dispatch({ type: FINISHED_TODO, payload: { toFinishKey: toFinishKey } });\n  };\n\n  return (\n    <ToDoListContainer length={filteredToDoList.length}>\n      {filteredToDoList.map((ele: Todo) => {\n        return (\n          <ToDoCard\n            key={ele.key}\n            onClick={() => {\n              handleToDoFinished(ele.key);\n            }}\n          >\n            <ToDoTextTitle>第{ele.key}項：</ToDoTextTitle>\n            <ToDoText isfinished={ele.finished} data-testid={ele.key}>\n              {ele.name}\n            </ToDoText>\n            <ToDoDeleteBtn\n              variant=\"contained\"\n              color=\"secondary\"\n              startIcon={<DeleteIcon />}\n              onClick={() => {\n                handleToDoDelete(ele.key);\n              }}\n            >\n              刪除\n            </ToDoDeleteBtn>\n          </ToDoCard>\n        );\n      })}\n    </ToDoListContainer>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"@emotion/styled\";\nimport { Select } from \"@material-ui/core\";\nimport {\n  FILTER_FINISHED_TODO,\n  FILTER_UNFINISHED_TODO,\n  FILTER_ALL_TODO,\n} from \"../store/constants/index\";\n\nconst FilterSelect = styled(Select)`\n  width: 30%;\n  min-width: 200px;\n  height: 40px;\n`;\n\nconst optionMap = [\n  { value: FILTER_UNFINISHED_TODO, text: \"未完成ToDoList\" },\n  { value: FILTER_FINISHED_TODO, text: \"完成ToDoList\" },\n  { value: FILTER_ALL_TODO, text: \"全部ToDoList\" },\n];\n\n\nexport default function ToDoFilter() {\n  const [filterType, setFilterType] = useState(FILTER_UNFINISHED_TODO);\n  const dispatch = useDispatch();\n\n  const filterDispatch = (type: String) => {\n    dispatch({ type: type });\n  };\n  const handleFilterSelect = (e: any) => {\n    setFilterType(e.target.value);\n    filterDispatch(e.target.value);\n  };\n  \n  return (\n    <>\n      <FilterSelect value={filterType} onChange={(e)=>{handleFilterSelect(e)}}>\n        {optionMap.map((ele) => {\n          return <option key={ele.text} value={ele.value}>顯示{ele.text}</option>;\n        })}\n      </FilterSelect>\n    </>\n  );\n}\n","import React, { useEffect, useState,useRef } from \"react\";\nimport ToDoInput from \"./components/ToDoInput\";\nimport ToDoList from \"./components/ToDoList\";\nimport ToDoFilter from \"./components/ToDoFilter\";\nimport { useSelector } from \"react-redux\";\nimport { rootState } from \"./store/reducers/index\";\nimport styled from \"@emotion/styled\";\nimport \"./App.css\";\n\nconst ToDoTitle = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst InputContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  height: 300px;\n`;\n\n\nfunction App() {\n  const ToDoListCount = useSelector((state: rootState) => state.ToDoList).count;\n  const allToDoList = useSelector((state: rootState) => state.ToDoList).ToDoList;\n  const [remainToDo, setRemainToDo] = useState(0);\n  const [finishedCount, setFinishedCount] = useState(0);\n  const isFinishToDoCount = useRef(0);\n\n  useEffect(() => {\n    isFinishToDoCount.current = allToDoList.filter((ele) => {\n      return ele.finished === true;\n    }).length;\n    setFinishedCount(isFinishToDoCount.current);\n    setRemainToDo(ToDoListCount - isFinishToDoCount.current);\n  },[ToDoListCount,allToDoList]);\n  return (\n    <div className=\"App\">\n      <InputContainer>\n        <ToDoTitle>\n          {\"ToDoList\"}\n          {remainToDo > 0 ? `剩餘${remainToDo}項` : \"\"}\n          {`已完成${finishedCount}`}\n        </ToDoTitle>\n        <ToDoInput />\n        <ToDoFilter />\n      </InputContainer>\n\n      <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { FILTER_FINISHED_TODO ,FILTER_UNFINISHED_TODO,FILTER_ALL_TODO} from \"../constants/index\";\nimport { FilterAction } from \"../actions/index\";\n\nconst FilterInitState = {\n  filterType:FILTER_UNFINISHED_TODO ,\n};\ninterface FilterInitState {\n  filterType: string;\n}\nconst FilterReducer = (state = FilterInitState,action: FilterAction): FilterInitState => {\n  switch (action.type) {\n    case FILTER_FINISHED_TODO: {\n      return Object.assign({}, state, {\n        filterType: FILTER_FINISHED_TODO,\n      });\n    }\n    case FILTER_UNFINISHED_TODO: {\n      return Object.assign({}, state, {\n        filterType: FILTER_UNFINISHED_TODO,\n      });\n    }\n    case FILTER_ALL_TODO: {\n      return Object.assign({}, state, {\n        filterType: FILTER_ALL_TODO,\n      });\n    }\n    default:\n        return state;\n    \n  }\n};\n\nexport default FilterReducer;\n","import { ADD_TODO, DELETE_TODO, FINISHED_TODO } from \"../constants/index\";\nimport { ToDoAction } from \"../actions/index\";\n\nexport interface initState {\n  ToDoList: { name: string; key: number; finished: boolean }[];\n  count: number;\n}\n\nconst initState = {\n  ToDoList: [{ name: \"first\", key: 0, finished: false }],\n  count: 0,\n};\n\nconst ToDoReducer = (state = initState, action: ToDoAction): initState => {\n  switch (action.type) {\n    case ADD_TODO: {\n      return Object.assign({}, state, {\n        ToDoList: state.ToDoList.concat({\n          name: action.payload.ToDoList.name,\n          key: action.payload.ToDoList.key,\n          finished: false,\n        }),\n        count: state.ToDoList.length,\n      });\n    }\n    case DELETE_TODO: {\n      const cloneToDo = state.ToDoList.slice().filter(\n        (ele) => ele.key !== action.payload.toDeleteKey\n      );\n\n      return {\n        ...state,\n        ToDoList: cloneToDo,\n        count: cloneToDo.length - 1,\n      };\n    }\n    case FINISHED_TODO: {\n      const cloneToDo = state.ToDoList.slice().map((ele)=>{\n        if(ele.key===action.payload.toFinishKey){\n          ele.finished = !ele.finished\n        }\n        return ele\n      });\n      \n      return {\n        ...state,\n        ToDoList: cloneToDo,\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default ToDoReducer;\n","import {combineReducers} from 'redux' \n\nimport filterReducer from './filterReducer'\nimport ToDoReducer from './ToDoReducer'\n\nconst rootReducer = combineReducers({filterReducer,ToDoList:ToDoReducer})\nexport type rootState = ReturnType<typeof rootReducer>;\nexport default rootReducer","import { createStore } from 'redux';\nimport rootReducer from './reducers/index';\nimport { composeWithDevTools } from 'redux-devtools-extension'\n\n\nconst store = createStore(rootReducer,composeWithDevTools());\n\nexport default store;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\nimport * as serviceWorker from './serviceWorker';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}